getgenv().config = {
    farm = {
        toggle = false,
        singleTarget = false,
        farmPrint = false,
        radius = 40,
        wait = 0.2
    },
    autoLootbag = false,
    autoOrb = false,
    egg = {
        selectedEgg = "",
        amount = 0,
        farm = false
    },
    timeRewards = false,
    fishing = false,
    antiafk = false
}
--[[

Made by griffindoescooking

]] --
repeat
    task.wait()
until game:IsLoaded()
if game.PlaceId ~= 8737899170 then
    game.Players.LocalPlayer:Kick("wrong game")
end
print("Pet Simulator 99 | griffindoescooking")

local LocalPlayer = game.Players.LocalPlayer
local HumanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart", true)

local VirtualUser = game:GetService("VirtualUser")
local sqrt = math.sqrt
local pow = math.pow

local Things = game.workspace['__THINGS']
local Debris = game.workspace['__DEBRIS']
local Map = game.workspace.Map
local instanceSpawnObby = Things.Instances.SpawnObby
local instanceMinefield = Things.Instances.Minefield
local instanceJungleObby = Things.Instances.JungleObby
local instanceAtlantis = Things.Instances.Atlantis
local instanceFishing = Things.Instances.Fishing
local instanceContainer = Things['__INSTANCE_CONTAINER']
local Lootbags = Things.Lootbags
local Orbs = Things.Orbs
local ShinyRelics = Things.ShinyRelics
local Breakables = Things.Breakables
local Pets = Things.Pets
local Network = game:GetService("ReplicatedStorage").Network
local PetInventory = LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets.EquippedPets

getgenv().currentCoins = {}
getgenv().equippedPets = {}
getgenv().totalClaimed = 0
getgenv().totalTime = 0

local eggTable = {
    "1 | Cracked Egg", "2 | Spotted Egg", "3 | Paw Egg", 
    "4 | Grass Egg", "5 | Wood Egg", "6 | Pumpkin Egg", 
    "7 | Hive Egg", "8 | Acorn Egg", "9 | Blossom Egg",
    "10 | Corgi Egg", "11 | Cat Egg", "12 | Dog Egg", 
    "13 | Dragon Egg", "14 | Rock Egg", "15 | Geode Egg", 
    "16 | Hut Egg", "17 | Grave Egg", "18 | Spike Egg", 
    "19 | Sprout Egg", "20 | Mushroom Egg", "21 | Spirit Egg", 
    "22 | Crimson Egg", "23 | Overgrown Egg", "24 | Mossy Egg", 
    "25 | Jungle Egg", "26 | Sandcastle Egg", "27 | Palm Tree Egg", 
    "28 | Beach Ball Egg", "29 | Coral Egg", "30 | Anchor Egg", 
    "31 | Atlantis Egg", "32 | Tropical Egg", "33 | Beach Egg", 
    "34 | Coconut Egg", "35 | Tiki Egg", "36 | Sand Bucket Egg", 
    "37 | Sunny Egg", "38 | Pirate Egg", "39 | Ship Egg", 
    "40 | Zebra Egg", "41 | Cheetah Egg", "42 | Cactus Egg", 
    "43 | Fossil Egg", "44 | Egyptian Egg", "45 | Sandstone Egg", 
    "46 | Cowboy Egg", "47 | Canyon Egg", "48 | Hyena Egg", 
    "49 | Melted Egg", "50 | Snow Egg", "51 | Icicle Egg", 
    "52 | Snowman Egg", "53 | Yeti Egg", "54 | Ice Egg", 
    "55 | Thawed Egg", "56 | Magma Egg", "57 | Obsidian Egg", 
    "58 | Volcano Egg", "59 | Bone Egg", "60 | Tentacle Egg", 
    "61 | Hell Egg",  "62 | Metal Egg", "63 | Sakura Egg", 
    "64 | Ninja Egg", "65 | Lantern Egg", "66 | Bonsai Egg",
    "67 | Garden Egg", "68 | Pixie Egg", "69 | Pedal Egg", 
    "70 | Crowned Egg", "71 | Royal Egg"
}
local zoneTable = {
    {"1 | Spawn", CFrame.new(212.035538, 20.1876869, -388.115417)}, {"2 | Colorful Forest", CFrame.new(372.539154, 16.6393204, -211.668884)}, 
    {"3 | Castle",  CFrame.new(530.453491, 16.6393204, -196.13797)}, {"4 | Green Forest",  CFrame.new(689.05304, 16.6393204, -205.87149)}, 
    {"5 | Autumn",  CFrame.new(867.194641, 16.6393204, -189.63826)}, {"6 | Cherry Blossom",  CFrame.new(862.67627, 16.6393204, 11.237937)}, 
    {"7 | Farm",  CFrame.new(692.400391, 16.6393204, 17.9911346)}, {"8 | Backyard",  CFrame.new(532.868164, 16.639328, 43.6470337)}, 
    {"9 | Misty Falls",  CFrame.new(376.211975, 16.6393242, 18.0910645)}, {"10 | Mine",  CFrame.new(192.829605, 16.6393204, 45.5758171)}, 
    {"11 | Crystal Caverns",  CFrame.new(209.164581, 16.6393204, 246.451965)}, {"12 | Dead Forest",  CFrame.new(373.901062, 16.6393204, 272.476379)}, 
    {"13 | Dark Forest",  CFrame.new(532.400635, 16.639328, 265.901733)}, {"14 | Mushroom Field",  CFrame.new(691.71637, 16.6393204, 274.932434)}, 
    {"15 | Enchanted Forest",  CFrame.new(875.281921, 16.639328, 267.881653)}, {"16 | Crimson Forest",  CFrame.new(862.621338, 16.639328, 486.007843)},
    {"17 | Jungle",  CFrame.new(693.105652, 16.6393204, 498.760559)}, {"19 | Oasis",  CFrame.new(372.10672, 16.639328, 499.208069)},
    {"18 | Jungle Temple",  CFrame.new(532.636536, 16.639328, 497.795471)}, {"20 | Beach",  CFrame.new(190.732224, 16.6393204, 487.357147)}, 
    {"21 | Coral Reef",  CFrame.new(207.498001, -33.3606873, 768.545471)}, {"22 | Shipwreck",  CFrame.new(372.649658, -33.3606873, 786.346558)}, 
    {"23 | Atlantis",  CFrame.new(533.234131, -93.8606186, 767.947815)}, {"24 | Palm Beach",  CFrame.new(808.733521, -69.4857025, 785.823608)}, 
    {"25 | Tiki",  CFrame.new(1014.25232, 16.6393356, 773.097778)},{"26 | Pirate Cove",CFrame.new(970.85302734375, 16.94143295288086, 923.5709838867188)},
    {"27 | Pirate Tavern",CFrame.new(878.7459716796875, 16.957433700561523, 1018.3610229492188)},{"28 | Shanty Town",CFrame.new(721.1669921875, 16.957433700561523, 1017.6840209960938)},
    {"29 | Desert Village",CFrame.new(567.2160034179688, 16.957433700561523, 1017.6840209960938)},{"30 | Fossil Digsite",CFrame.new(406.0140075683594, 16.957433700561523, 1017.6840209960938)},
    {"31 | Desert Pyramids",CFrame.new(360.9360046386719, 16.94143295288086, 1161.2469482421875)},{"32 | Red Desert",CFrame.new(458.25799560546875, 16.957433700561523, 1256.342041015625)},
    {"33 | Wild West",CFrame.new(607.89697265625, 16.957433700561523, 1256.342041015625)},{"34 | Grand Canyons",CFrame.new(757.2940063476562, 16.957433700561523, 1256.342041015625)},
    {"35 | Safari",CFrame.new(909.9240112304688, 16.957433700561523, 1256.342041015625)},{"36 | Mountains",CFrame.new(1076.3909912109375, 16.957433700561523, 1256.342041015625)},
    {"37 | Snow Village",CFrame.new(1121.7769775390625, 16.94143295288086, 1400.458984375)},{"38 | Icy Peaks",CFrame.new(1023.5139770507812, 16.957433700561523, 1494.6949462890625)},
    {"39 | Ice Rink",CFrame.new(874.1409912109375, 16.957433700561523, 1494.6949462890625)},{"40 | Ski Town",CFrame.new(707.9400024414062, 16.957433700561523, 1494.6949462890625)},
    {"41 | Hot Springs",CFrame.new(662.7490234375, 16.94143295288086, 1637.83203125)},{"42 | Fire and Ice",CFrame.new(760.2379760742188, 16.957433700561523, 1732.842041015625)},
    {"43 | Volcano",CFrame.new(909.4849243164062, 16.957433700561523, 1732.842041015625)},{"44 | Obsidian Cave",CFrame.new(1057.867919921875, 16.957433700561523, 1732.842041015625)},
    {"45 | Lava Forest",CFrame.new(1206.64892578125, 16.957433700561523, 1732.842041015625)},{"46 | Underworld",CFrame.new(1371.876953125, 16.957433700561523, 1732.842041015625)},
    {"47 | Underworld Bridge",CFrame.new(1416.886962890625, 16.957433700561523, 1873.783935546875)},{"48 | Underworld Castle",CFrame.new(1416.886962890625, 16.957433700561523, 2025.4990234375)},
    {"49 | Metal Dojo",CFrame.new(1324.8709716796875, 16.957433700561523, 2120.532958984375)},{"50 | Fire Dojo",CFrame.new(1158.8800048828125, 16.957433700561523, 2120.532958984375)},
    {"51 | Samurai Village",CFrame.new(789.0751953125, 16.957012176513672, 2119.5673828125)},{"52 | Bamboo Forest",CFrame.new(641.6153564453125, 16.957035064697266, 2119.66650390625)},
    {"53 | Zen Garden",CFrame.new(482.8709716796875, 16.957433700561523, 2119.866943359375)},{"54 | Flower Field",CFrame.new(318.35394287109375, 16.941783905029297, 2119.868896484375)},
    {"55 | FairyTale Meadows",CFrame.new(257.15765380859375, 16.957441329956055, 2245.4831542968752)},{"56 | FairyTable Castle",CFrame.new(257.15765380859375, 16.957441329956055, 2403.983154296875)},
    {"57 | Royal Kingdom",CFrame.new(318.35394287109375, 16.94178581237793, 2664.445068359375)},{"58 | Fairy Castle",CFrame.new(349.2230224609375, 16.957448959350586, 2664.471435546875)}
}
local vendingTable = {
    "PotionVendingMachine1",
    --"PotionVendingMachine2",
    "EnchantVendingMachine1",
    --"EnchantVendingMachine2",
    "FruitVendingMachine1",
    "FruitVendingMachine2",
}

local function indexPets()
    table.clear(equippedPets)
    for _, pet in ipairs(Pets:GetChildren()) do
        if PetInventory:FindFirstChild(pet.Name) then
            table.insert(equippedPets, pet.Name)
        end
    end
    return equippedPets
end
local function calcDistance(obj1, obj2)
    local pPosX, pPosZ = obj1.CFrame.X, obj1.CFrame.Z
    local hPosX, hPosZ = obj2.CFrame.X, obj2.CFrame.Z

    return sqrt(pow(pPosX - hPosX, 2) + pow(pPosZ - hPosZ, 2))
end
local function clickPosition(x,y)
    VirtualUser:Button1Down(Vector2.new(x,y))
    VirtualUser:Button1Up(Vector2.new(x,y))
end
local function sendNotification(title, text, duration)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = tonumber(duration),
        Callback = function()
        end,
        Button1 = "Got It!"
    })
end
local function goToPart(cframe)
    HumanoidRootPart.CFrame = cframe
end
local function waitFor(path, object, bool)
    bool = bool or false
    repeat 
        task.wait() 
    until path:FindFirstChild(object, bool)
    return path:FindFirstChild(object, bool)
end

local vendingFunctions = {
    ["PotionVendingMachine1"] = function() 
        goToPart(zoneTable[6][2])
        local PotionVendingMachine1 = waitFor(Map[zoneTable[6][1]].INTERACT, "PotionVendingMachine1", true)
        goToPart(PotionVendingMachine1.Pad.CFrame)
    end,
    --[[["PotionVendingMachine2"] = function() 
        
    end,]]
    ["EnchantVendingMachine1"] = function() 
        goToPart(zoneTable[9][2])
        local EnchantVendingMachine1 = waitFor(Map[zoneTable[6][1]].INTERACT, "EnchantVendingMachine1", true)
        goToPart(EnchantVendingMachine1.Pad.CFrame)
    end,
    --[[["EnchantVendingMachine2"] = function() 
       
    end,]]
    ["FruitVendingMachine1"] = function() 
        goToPart(zoneTable[14][2])
        local FruitVendingMachine1 = waitFor(Map[zoneTable[6][1]].INTERACT, "FruitVendingMachine1", true)
        goToPart(FruitVendingMachine1.Pad.CFrame)
    end,
    ["FruitVendingMachine2"] = function() 
        goToPart(zoneTable[26][2])
        local FruitVendingMachine2 = waitFor(Map[zoneTable[6][1]].INTERACT, "FruitVendingMachine2", true)
        goToPart(FruitVendingMachine2.Pad.CFrame)
    end,
}

local project = loadstring(game:HttpGet("https://raw.githubusercontent.com/idonthaveoneatm/Libraries/normal/quake/src"))()
local main = project:Window({
    Title = "Pet Simulator 99",
    Parent = game.CoreGui
})
local farming = main:Tab({
    Name = "Farming",
    tabColor = Color3.fromHex("#71d1f5"),
    Image = "rbxassetid://10709769841"
})
local zones = main:Tab({
    Name = "Zones",
    tabColor = Color3.fromHex("#9bf038"),
    Image = "rbxassetid://15555209580"
})
local obbies = main:Tab({
    Name = "Obbies",
    tabColor = Color3.fromHex("#d19b4a"),
    Image = "rbxassetid://10723376114"
})
local rewards = main:Tab({
    Name = "Rewards",
    tabColor = Color3.fromHex("#da0a48"),
    Image = "rbxassetid://10723396402"
})
local misc = main:Tab({
    Name = "Miscellaneous",
    tabColor = Color3.fromHex("#34d793"),
    Image = "rbxassetid://10709819149"
})
local credits = main:Tab({
    Name = "Credits",
    Image = "rbxassetid://10747373176"
})
local antiAFK
farming:Toggle({
    Name = "Farm Coins",
    Default = false,
    Callback = function(value)
        config.farm.toggle = value
        while config.farm.toggle and task.wait() do
            for _, v in ipairs(Breakables:GetChildren()) do
                if v.Name ~= "Highlight" and v:FindFirstChild("Hitbox", true) then
                    local part = v:FindFirstChild("Hitbox", true)

                    if calcDistance(part, HumanoidRootPart) <= config.farm.radius then
                        if config.farm.singleTarget then
                            local tmpName = v.Name
                            local startTime = os.clock()

                            repeat
                                if calcDistance(part, HumanoidRootPart) > config.farm.radius then
                                    break
                                end
                                task.wait(config.farm.wait)
                                Network.Breakables_PlayerDealDamage:FireServer(v.Name)
                            until not Breakables:FindFirstChild(v.Name)

                            totalClaimed = totalClaimed + 1;
                            totalTime = totalTime + (os.clock() - startTime)
                            if config.farm.farmPrint then
                                print("farmed " .. tmpName .. " in: " .. tostring(os.clock() - startTime) .. " Avg: " .. tostring(totalTime / totalClaimed))
                            end
                        else
                            if not table.find(currentCoins, v.Name) then
                                table.insert(currentCoins, v.Name)
                                task.spawn(function()
                                    local tmpPart = part
                                    local tmpName = v.Name
                                    local startTime = os.clock()
                                    repeat
                                        if calcDistance(tmpPart, HumanoidRootPart) > config.farm.radius then
                                            table.remove(currentCoins, table.find(currentCoins, v.Name))
                                            break
                                        end

                                        task.wait(config.farm.wait * math.random(1, 2))

                                        Network.Breakables_PlayerDealDamage:FireServer(tmpName)
                                    until not Breakables:FindFirstChild(tmpName)

                                    table.remove(currentCoins, table.find(currentCoins, v.Name))
                                    totalClaimed = totalClaimed + 1;
                                    totalTime = totalTime + (os.clock() - startTime)
                                    if config.farm.farmPrint then
                                        print("farmed " .. tmpName .. " in: " .. tostring(os.clock() - startTime) .. " Avg: " .. tostring(totalTime / totalClaimed))
                                    end
                                end)
                            end
                        end
                    end
                end
            end
        end
    end
})
farming:Toggle({
    Name = "Single Target",
    Default = false,
    Callback = function(value)
        config.farm.singleTarget = value
    end
})
farming:Toggle({
    Name = "Console Print",
    Default = false,
    Callback = function(value)
        config.farm.farmPrint = value
    end
})
farming:TextBox({
    Name = "Radius (Recommended: 70)",
    Callback = function(value)
        if tonumber(value) then
            config.farm.radius = tonumber(value)
        else
            config.farm.radius = 40
            sendNotification("Radius Error", "You need the RADIUS to be a number. It is now 40", 50)
        end
    end
})
farming:TextBox({
    Name = "Wait Time (Recommended: 0.2)",
    Callback = function(value)
        if tonumber(value) then
            config.farm.wait = tonumber(value)
        else
            config.farm.wait = 0.2
            sendNotification("Wait Time Error", "You need the WAIT TIME to be a number. It is now 0.2", 50)
        end
    end
})
farming:Section("Collection")
farming:Label("Auto Collect Orbs is currently broken/patched")
--[[
farming:Toggle({
    Name = "Collect Orbs",
    Default = false,
    Callback = function(value)
        config.autoOrb = value
        while config.autoOrb and task.wait() do

            for _, orb in ipairs(Orbs:GetChildren()) do
                if orb:IsA("Part") then
                    orb.CFrame = HumanoidRootPart.CFrame
                end
            end

        end
    end
})
]]
farming:Toggle({
    Name = "Collect Lootbags",
    Default = false,
    Callback = function(value)
        config.autoLootbag = value
        while config.autoLootbag and task.wait() do

            for _, lootbag in ipairs(Lootbags:GetDescendants()) do
                if lootbag:IsA("MeshPart") then
                    lootbag.CFrame = HumanoidRootPart.CFrame
                end
            end

        end
    end
})
farming:Section("Egg Farming")
farming:Label("You must be near eggs to hatch them")
farming:Dropdown({
    Name = "Egg to farm",
    Items = eggTable,
    Multiselect = false,
    Callback = function(eggPicked)
        config.egg.selectedEgg = eggPicked
    end
})
farming:Slider({
    Name = "Amount of eggs",
    Step = 1,
    Max = 99,
    Min = 1,
    InitialValue = 1,
    Callback = function(eggAmount)
        config.egg.amount = eggAmount
        print(tostring(config.egg.amount))
    end
})
farming:Toggle({
    Name = "Farm selected egg",
    Default = false,
    Callback = function(value)
        config.egg.farm = value
        while config.egg.farm and task.wait() do
            local splitName = string.split(config.egg.selectedEgg, " | ")

            Network.Eggs_RequestPurchase:InvokeServer(splitName[2],tonumber(config.egg.amount))
            task.wait(0.4)

            repeat 
                task.wait()
                clickPosition(math.huge,math.huge)
            until not game.workspace.Camera:FindFirstChild("Eggs")
            task.wait(1)
        end 
    end
})
farming:Section("Fishing")
local fishingStatus = false
farming:Toggle({
    Name = "Start fishing",
    Default = false,
    Callback = function(value)
        config.fishing = value
        
        if not instanceContainer.Active:FindFirstChild("Fishing") and config.fishing then
            goToPart(instanceFishing:FindFirstChild("Enter", true).CFrame) 
        end
    
        task.wait(0.2)
    
        local fishing = waitFor(instanceContainer.Active, "Fishing")
        local fishingModule = require(fishing.ClientModule.FishingGame)
        local Layer1 =  waitFor(fishing.Water, "Layer1")
        local Bobbers = waitFor(fishing, "Bobbers")
        local L1Position = Layer1.Position
        
        if HumanoidRootPart.Position ~= L1Position and config.fishing then
           goToPart(Layer1.CFrame) 
        end
        
        local function fishingRemote(arg1, arg2)
            if arg2 then
                return Network.Instancing_FireCustomFromClient:FireServer("Fishing",arg1, arg2)
            end
            return Network.Instancing_FireCustomFromClient:FireServer("Fishing",arg1)
        end
        local function isBubbling()
            local bubbling = false
            for _,host in ipairs(Debris:GetChildren()) do
                if host.Name == "host" and host:FindFirstChild("Attachment") and (host.Attachment:FindFirstChild("Bubbles") or host.Attachment:FindFirstChild("Rare Bubbles")) then
                    local distance = (HumanoidRootPart.Position.X - host.Position.X)
                    if distance <= 2 then
                        bubbling = true
                    end
                end
            end
            return bubbling
        end
        
        local oldStartGame,oldStopGame,oldIsFishInBar
        oldStartGame = hookfunction(fishingModule.StartGame, function(...)
            fishingStatus = true
            return oldStartGame(...)
        end)
        oldStopGame = hookfunction(fishingModule.StopGame, function(...)
            fishingStatus = false
            return oldStopGame(...)
        end)
        oldIsFishInBar = hookfunction(fishingModule.IsFishInBar, function(...) 
            if config.fishing then
                return true
            else
                return oldIsFishInBar(...)
            end
        end)
        
        while config.fishing and task.wait() do
            
            fishingRemote("RequestCast", Vector3.new(L1Position.X,L1Position.Y,L1Position.Z))
            
            repeat task.wait() until isBubbling() and config.fishing
            
            fishingRemote("RequestReel")
            
            repeat task.wait() until (not fishingStatus) and config.fishing
            
        end
        goToPart(fishing.Interactable:FindFirstChild("Pad", true).CFrame + Vector3.new(0,3,0))
    end
})

zones:Section("Miscellaneous")
zones:Button({
    Name = "Remove water",
    Callback = function() 
        for _, water in ipairs(Map:GetDescendants()) do
            if water:IsA("Folder") and water.Name == "Water Bounds" then
                water:Destroy()
            end
        end
    end
})
zones:Label("Has zones 1-58")
for _,zone in ipairs(zoneTable) do
    zones:Button({
        Name = tostring(zone[1]),
        Callback = function() 
            goToPart(zone[2] + Vector3.new(0,5,0))
        end
    })
end

obbies:Button({
    Name = 'Complete "Spawn Obby"',
    Callback = function()
        goToPart(instanceSpawnObby:FindFirstChild("Enter", true).CFrame)
        task.wait(1)
        
        local spawnObby = waitFor(instanceContainer.Active, "SpawnObby")
        local startLine = waitFor(spawnObby, "StartLine")
        local endPad = waitFor(spawnObby, "Goal").Pad
        
        
        goToPart(startLine:FindFirstChild("Part").CFrame + Vector3.new(0,3,0))
        task.wait(1)
        goToPart(endPad.CFrame + Vector3.new(0,3,0))
    end
})
obbies:Button({
    Name = 'Complete "Minefield"',
    Callback = function()
        goToPart(instanceMinefield:FindFirstChild("Enter", true).CFrame)
        task.wait(1)
        
        local minefield = waitFor(instanceContainer.Active, "Minefield")
        local mines = waitFor(minefield, "Mines")
        local finish = waitFor(minefield, "Finish")
        
        local nextX = 0
        local nextZ = 0
        for _,mine in ipairs(mines:GetChildren()) do
            if nextX == 0 then
                local oldPos = mine.Pad.CFrame
                mine.Pad.CanCollide = false
                nextX = mine.Pad.Position.X
                nextZ = mine.Pad.Position.Z
                mine.Pad.CFrame = HumanoidRootPart.CFrame
                task.wait()
                mine.Pad.CFrame = oldPos
                mine.Pad.CanCollide = true
                
                if tostring(mine.Pad.BrickColor) == "Really red" then
                    nextZ = nextZ + 10
                    task.wait(3)
                else
                    nextX = nextX + 10
                end
            else
                if mine.Pad.Position.X == nextX and mine.Pad.Position.Z == nextZ then
                    local oldPos = mine.Pad.CFrame
                    mine.Pad.CanCollide = false
                    mine.Pad.CFrame = HumanoidRootPart.CFrame
                    task.wait()
                    mine.Pad.CFrame = oldPos
                    mine.Pad.CanCollide = true
                    if tostring(mine.Pad.BrickColor) == "Really red" then
                        nextZ = nextZ + 10
                        task.wait(3)
                    else
                        nextX = nextX + 10
                    end
                end
            end
        end
        goToPart(finish.CFrame)
    end
})
obbies:Button({
    Name = 'Complete "Jungle Obby"',
    Callback = function() 
        goToPart(instanceJungleObby:FindFirstChild("Enter", true).CFrame)
        task.wait(1)
        
        local jungleObby = waitFor(instanceContainer.Active, "JungleObby")

        local startLine = waitFor(jungleObby, "Interactable").StartLine
        local goalPad = jungleObby.Interactable.Goal.Pad
        
        goToPart(startLine.CFrame + Vector3.new(0,3,0))
        task.wait(1)
        goToPart(goalPad.CFrame + Vector3.new(0,3,0))
    end
})
obbies:Button({
    Name = 'Complete "Atlantis"',
    Callback = function() 
        goToPart(instanceAtlantis:FindFirstChild("Enter", true).CFrame)
        task.wait(1)

        local atlantis = waitFor(instanceContainer.Active, "Atlantis")
        local rings = waitFor(atlantis, "Rings")

        for i=1,31 do
            repeat task.wait() until rings:FindFirstChild(tostring(i))
            local ring = rings:FindFirstChild(tostring(i))
            task.wait(0.4)
            HumanoidRootPart.CFrame = ring.Collision.CFrame
        end
    end
})

rewards:Toggle({
    Name = 'Collect Time Rewards',
    Default = false,
    Callback = function(value)
        config.timeRewards = value
        while config.timeRewards and task.wait() do
            for i=1,12 do
                Network:FindFirstChild("Redeem Free Gift"):InvokeServer(i)
            end
        end
    end
})
misc:Label("These are things that dont fit in a category")
misc:Section("Vending Machines")
local vendingName = ""
local goToVendingMachine
misc:Dropdown({
    Name = "Vending Machine",
    Items = vendingTable,
    Multiselect = false,
    Callback = function(name)
        vendingName = name
        goToVendingMachine:SetText("Go to "..vendingName)
    end
})
goToVendingMachine = misc:Button({
    Name = "Go to vending Machine",
    Callback = function()
        vendingFunctions[vendingName]()
    end
})
antiAFK = misc:Toggle({
    Name = "Anti AFK",
    Default = false,
    Callback = function(value)
        config.antiafk = value
        while config.antiafk and task.wait() do
            LocalPlayer.Character.Humanoid:ChangeState(3)
            task.wait(math.random(120,180))
        end
    end
})

credits:Label("UI: griffindoescooking")
credits:Label("Script: griffindoescooking, project L")
credits:Button({
    Name = "project L",
    Callback = function()
        setclipboard("https://discord.gg/Mw7rYHDNw4")
    end
})
credits:Section("Support: ")
credits:Button({
    Name = "Discord",
    Callback = function()
        setclipboard("https://discord.gg/DBPHwFyCVT")
    end
})
