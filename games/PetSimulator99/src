getgenv().config = {
    farm = {
        toggle = false,
        singleTarget = false,
        farmPrint = false,
        radius = 40,
        wait = 0.2
    },
    autoLootbag = false,
    autoOrb = false,
    egg = {
        selectedEgg = "",
        amount = 0,
        farm = false
    }
}
--[[

Made by griffindoescooking

]] --
repeat
    task.wait()
until game:IsLoaded()
if game.PlaceId ~= 8737899170 then
    game.Players.LocalPlayer:Kick("wrong game")
end
print("Pet Simulator 99 | griffindoescooking")

local LocalPlayer = game.Players.LocalPlayer
local HumanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart", true)

local vim = game:GetService("VirtualInputManager")
local sqrt = math.sqrt
local pow = math.pow

local Things = game.workspace['__THINGS']
local instanceSpawnObby = Things.Instances.SpawnObby
local instanceContainer = Things['__INSTANCE_CONTAINER']
local Lootbags = Things.Lootbags
local Orbs = Things.Orbs
local ShinyRelics = Things.ShinyRelics
local Breakables = Things.Breakables
local Pets = Things.Pets
local Network = game:GetService("ReplicatedStorage").Network
local PetInventory = LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets.EquippedPets

getgenv().currentCoins = {}
getgenv().equippedPets = {}
getgenv().totalClaimed = 0
getgenv().totalTime = 0

local eggTable = {
    "1 | Cracked Egg", "2 | Spotted Egg", "3 | Paw Egg", 
    "4 | Grass Egg", "5 | Wood Egg", "6 | Pumpkin Egg", 
    "7 | Hive Egg", "8 | Acorn Egg", "9 | Blossom Egg",
    "10 | Corgi Egg", "11 | Cat Egg", "12 | Dog Egg", 
    "13 | Dragon Egg", "14 | Rock Egg", "15 | Geode Egg", 
    "16 | Hut Egg", "17 | Grave Egg", "18 | Spike Egg", 
    "19 | Sprout Egg", "20 | Mushroom Egg", "21 | Spirit Egg", 
    "22 | Crimson Egg", "23 | Overgrown Egg", "24 | Mossy Egg", 
    "25 | Jungle Egg", "26 | Sandcastle Egg", "27 | Palm Tree Egg", 
    "28 | Beach Ball Egg", "29 | Coral Egg", "30 | Anchor Egg", 
    "31 | Atlantis Egg", "32 | Tropical Egg", "33 | Beach Egg", 
    "34 | Coconut Egg", "35 | Tiki Egg", "36 | Sand Bucket Egg", 
    "37 | Sunny Egg", "38 | Pirate Egg", "39 | Ship Egg", 
    "40 | Zebra Egg", "41 | Cheetah Egg", "42 | Cactus Egg", 
    "43 | Fossil Egg", "44 | Egyptian Egg", "45 | Sandstone Egg", 
    "46 | Cowboy Egg", "47 | Canyon Egg", "48 | Hyena Egg", 
    "49 | Melted Egg", "50 | Snow Egg", "51 | Icicle Egg", 
    "52 | Snowman Egg", "53 | Yeti Egg", "54 | Ice Egg", 
    "55 | Thawed Egg", "56 | Magma Egg", "57 | Obsidian Egg", 
    "58 | Volcano Egg", "59 | Bone Egg", "60 | Tentacle Egg", 
    "61 | Hell Egg",  "62 | Metal Egg", "63 | Sakura Egg", 
    "64 | Ninja Egg", "65 | Lantern Egg", "66 | Bonsai Egg",
    "67 | Garden Egg", "68 | Pixie Egg", "69 | Pedal Egg", 
    "70 | Crowned Egg", "71 | Royal Egg"
}

local zoneTable = {
    {"1 | Spawn", CFrame.new(212.035538, 20.1876869, -388.115417)}, {"2 | Colorful Forest", CFrame.new(372.539154, 16.6393204, -211.668884)}, 
    {"3 | Castle",  CFrame.new(530.453491, 16.6393204, -196.13797)}, {"4 | Green Forest",  CFrame.new(689.05304, 16.6393204, -205.87149)}, 
    {"5 | Autumn",  CFrame.new(867.194641, 16.6393204, -189.63826)}, {"6 | Cherry Blossom",  CFrame.new(862.67627, 16.6393204, 11.237937)}, 
    {"7 | Farm",  CFrame.new(692.400391, 16.6393204, 17.9911346)}, {"8 | Backyard",  CFrame.new(532.868164, 16.639328, 43.6470337)}, 
    {"9 | Misty Falls",  CFrame.new(376.211975, 16.6393242, 18.0910645)}, {"10 | Mine",  CFrame.new(192.829605, 16.6393204, 45.5758171)}, 
    {"11 | Crystal Caverns",  CFrame.new(209.164581, 16.6393204, 246.451965)}, {"12 | Dead Forest",  CFrame.new(373.901062, 16.6393204, 272.476379)}, 
    {"13 | Dark Forest",  CFrame.new(532.400635, 16.639328, 265.901733)}, {"14 | Mushroom Field",  CFrame.new(691.71637, 16.6393204, 274.932434)}, 
    {"15 | Enchanted Forest",  CFrame.new(875.281921, 16.639328, 267.881653)}, {"16 | Crimson Forest",  CFrame.new(862.621338, 16.639328, 486.007843)},
    {"17 | Jungle",  CFrame.new(693.105652, 16.6393204, 498.760559)}, {"19 | Oasis",  CFrame.new(372.10672, 16.639328, 499.208069)},
    {"18 | Jungle Temple",  CFrame.new(532.636536, 16.639328, 497.795471)}, {"20 | Beach",  CFrame.new(190.732224, 16.6393204, 487.357147)}, 
    {"21 | Coral Reef",  CFrame.new(207.498001, -33.3606873, 768.545471)}, {"22 | Shipwreck",  CFrame.new(372.649658, -33.3606873, 786.346558)}, 
    {"23 | Atlantis",  CFrame.new(533.234131, -93.8606186, 767.947815)}, {"24 | Palm Beach",  CFrame.new(808.733521, -69.4857025, 785.823608)}, 
    {"25 | Tiki",  CFrame.new(1014.25232, 16.6393356, 773.097778)},{"26 | Pirate Cove"}, {CFrame.new(970.85302734375, 16.94143295288086, 923.5709838867188)},
    {"27 | Pirate Tavern"}, {CFrame.new(878.7459716796875, 16.957433700561523, 1018.3610229492188)},{"28 | Shanty Town"}, {CFrame.new(721.1669921875, 16.957433700561523, 1017.6840209960938)},
    {"29 | Desert Village"}, {CFrame.new(567.2160034179688, 16.957433700561523, 1017.6840209960938)},{"30 | Fossil Digsite"}, {CFrame.new(406.0140075683594, 16.957433700561523, 1017.6840209960938)},
    {"31 | Desert Pyramids"}, {CFrame.new(360.9360046386719, 16.94143295288086, 1161.2469482421875)},{"32 | Red Desert"}, {CFrame.new(458.25799560546875, 16.957433700561523, 1256.342041015625)},
    {"33 | Wild West"}, {CFrame.new(607.89697265625, 16.957433700561523, 1256.342041015625)},{"34 | Grand Canyons"}, {CFrame.new(757.2940063476562, 16.957433700561523, 1256.342041015625)},
    {"35 | Safari"}, {CFrame.new(909.9240112304688, 16.957433700561523, 1256.342041015625)},{"36 | Mountains"}, {CFrame.new(1076.3909912109375, 16.957433700561523, 1256.342041015625)},
    {"37 | Snow Village"}, {CFrame.new(1121.7769775390625, 16.94143295288086, 1400.458984375)},{"38 | Icy Peaks"}, {CFrame.new(1023.5139770507812, 16.957433700561523, 1494.6949462890625)},
    {"39 | Ice Rink"}, {CFrame.new(874.1409912109375, 16.957433700561523, 1494.6949462890625)},{"40 | Ski Town"}, {CFrame.new(707.9400024414062, 16.957433700561523, 1494.6949462890625)},
    {"41 | Hot Springs"}, {CFrame.new(662.7490234375, 16.94143295288086, 1637.83203125)},{"42 | Fire and Ice"}, {CFrame.new(760.2379760742188, 16.957433700561523, 1732.842041015625)},
    {"43 | Volcano"}, {CFrame.new(909.4849243164062, 16.957433700561523, 1732.842041015625)},{"44 | Obsidian Cave"}, {CFrame.new(1057.867919921875, 16.957433700561523, 1732.842041015625)},
    {"45 | Lava Forest"}, {CFrame.new(1206.64892578125, 16.957433700561523, 1732.842041015625)},{"46 | Underworld"}, {CFrame.new(1371.876953125, 16.957433700561523, 1732.842041015625)},
    {"47 | Underworld Bridge"}, {CFrame.new(1416.886962890625, 16.957433700561523, 1873.783935546875)},{"48 | Underworld Castle"}, {CFrame.new(1416.886962890625, 16.957433700561523, 2025.4990234375)},
    {"49 | Metal Dojo"}, {CFrame.new(1324.8709716796875, 16.957433700561523, 2120.532958984375)},{"50 | Fire Dojo"}, {CFrame.new(1158.8800048828125, 16.957433700561523, 2120.532958984375)},
    {"51 | Samurai Village"}, {CFrame.new(789.0751953125, 16.957012176513672, 2119.5673828125)},{"52 | Bamboo Forest"}, {CFrame.new(641.6153564453125, 16.957035064697266, 2119.66650390625)},
    {"53 | Zen Garden"}, {CFrame.new(482.8709716796875, 16.957433700561523, 2119.866943359375)},{"54 | Flower Field"}, {CFrame.new(318.35394287109375, 16.941783905029297, 2119.868896484375)},
    {"55 | FairyTale Meadows"}, {CFrame.new(257.15765380859375, 16.957441329956055, 2245.4831542968752)},{"56 | FairyTable Castle"}, {CFrame.new(257.15765380859375, 16.957441329956055, 2403.983154296875)},
    {"57 | Royal Kingdom"}, {CFrame.new(318.35394287109375, 16.94178581237793, 2664.445068359375)},{"58 | Fairy Castle"}, {CFrame.new(349.2230224609375, 16.957448959350586, 2664.471435546875)}
}

local function indexPets()
    table.clear(equippedPets)
    for _, pet in ipairs(Pets:GetChildren()) do
        if PetInventory:FindFirstChild(pet.Name) then
            table.insert(equippedPets, pet.Name)
        end
    end
    return equippedPets
end
local function calcDistance(obj1, obj2)
    local pPosX, pPosZ = obj1.CFrame.X, obj1.CFrame.Z
    local hPosX, hPosZ = obj2.CFrame.X, obj2.CFrame.Z

    return sqrt(pow(pPosX - hPosX, 2) + pow(pPosZ - hPosZ, 2))
end
local function clickPosition(x,y)
    vim:SendMouseButtonEvent(x, y, 0, true, griffindoescooking, 1)
    vim:SendMouseButtonEvent(x, y, 0, false, griffindoescooking, 1)
end
local function getCenter(visible)
    local frame
    if not game.CoreGui:FindFirstChild(LocalPlayer.Name) then
        local gui = Instance.new("ScreenGui")
        gui.Name = LocalPlayer.Name
        gui.Parent = game.CoreGui
        frame = Instance.new("TextLabel")
        frame.Parent = gui
        frame.Name = "warning"
        frame.AnchorPoint = Vector2.new(0.5,0.5)
        frame.Position = UDim2.fromScale(0.5,0.5)
        frame.Size = UDim2.fromOffset(10,10)
        frame.Visible = visible
        frame.BackgroundColor3 = Color3.fromRGB(255,0,0)
        frame.BackgroundTransparency = 0
        frame.Text = "Make sure nothing is the square"
    else
        frame = game.CoreGui:FindFirstChild(LocalPlayer.Name).warning
        frame.AnchorPoint = Vector2.new(0.5,0.5)
        frame.Position = UDim2.fromScale(0.5,0.5)
        frame.Size = UDim2.fromOffset(10,10)
        frame.Visible = visible
    end

    return {frame.AbsolutePosition.X, frame.AbsolutePosition.Y}
end
local function sendNotification(title, text, duration)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = tonumber(duration),
        Callback = function()
        end,
        Button1 = "Got It!"
    })
end
local function goToPart(cframe)
    HumanoidRootPart.CFrame = cframe
end

local libary = loadstring(game:HttpGet("https://raw.githubusercontent.com/idonthaveoneatm/Libraries/normal/tmp/src"))()
local main = libary:CreateWindow({
    Title = "Pet Simulator 99"
})
local farming = main:CreateTab({
    Name = "Farming",
    Icon = "rbxassetid://10709769841"
}) farming:CreateSection("Farming")
local egg = main:CreateTab({
    Name = "Egging",
    Icon = "rbxassetid://10723345518"
}) egg:CreateSection("Egging")
local teleports = main:CreateTab({
    Name = "Teleports"
}) teleports:CreateSection("Teleport")
local obbies = main:CreateTab({
    Name = "Obbies"
}) obbies:CreateSection("Obbies")
local credits = main:CreateTab({
    Name = "Credits",
    Icon = "rbxassetid://10723396402"
}) credits:CreateSection("Credits")

farming:CreateToggle({
    Name = "Farm Coins",
    Callback = function(value)
        config.farm.toggle = value
        while config.farm.toggle and task.wait() do
            for _, v in ipairs(Breakables:GetChildren()) do
                if v.Name ~= "Highlight" and v:FindFirstChild("Hitbox", true) then
                    local part = v:FindFirstChild("Hitbox", true)

                    if calcDistance(part, HumanoidRootPart) <= config.farm.radius then
                        if config.farm.singleTarget then
                            local tmpName = v.Name
                            local startTime = os.clock()

                            repeat
                                if calcDistance(part, HumanoidRootPart) > config.farm.radius then
                                    break
                                end
                                task.wait(config.farm.wait)
                                Network.Breakables_PlayerDealDamage:FireServer(v.Name)
                            until not Breakables:FindFirstChild(v.Name)

                            totalClaimed = totalClaimed + 1;
                            totalTime = totalTime + (os.clock() - startTime)
                            if config.farm.farmPrint then
                                print("farmed " .. tmpName .. " in: " .. tostring(os.clock() - startTime) .. " Avg: " .. tostring(totalTime / totalClaimed))
                            end
                        else
                            if not table.find(currentCoins, v.Name) then
                                table.insert(currentCoins, v.Name)
                                task.spawn(function()
                                    local tmpPart = part
                                    local tmpName = v.Name
                                    local startTime = os.clock()
                                    repeat
                                        if calcDistance(tmpPart, HumanoidRootPart) > config.farm.radius then
                                            table.remove(currentCoins, table.find(currentCoins, v.Name))
                                            break
                                        end

                                        task.wait(config.farm.wait * math.random(1, 2))

                                        Network.Breakables_PlayerDealDamage:FireServer(tmpName)
                                    until not Breakables:FindFirstChild(tmpName)

                                    table.remove(currentCoins, table.find(currentCoins, v.Name))
                                    totalClaimed = totalClaimed + 1;
                                    totalTime = totalTime + (os.clock() - startTime)
                                    if config.farm.farmPrint then
                                        print("farmed " .. tmpName .. " in: " .. tostring(os.clock() - startTime) .. " Avg: " .. tostring(totalTime / totalClaimed))
                                    end
                                end)
                            end
                        end
                    end
                end
            end
        end
    end
})
farming:CreateToggle({
    Name = "Single Target",
    Callback = function(value)
        config.farm.singleTarget = value
    end
})
farming:CreateToggle({
    Name = "Console Print",
    Callback = function(value)
        config.farm.farmPrint = value
    end
})
farming:CreateInput({
    Name = "Radius (Recommended: 70)",
    Callback = function(value)
        if tonumber(value) then
            config.farm.radius = tonumber(value)
        else
            config.farm.radius = 40
            sendNotification("Radius Error", "You need the RADIUS to be a number. It is now 40", 50)
        end
    end
})
farming:CreateInput({
    Name = "Wait Time (Recommended: 0.2)",
    Callback = function(value)
        if tonumber(value) then
            config.farm.wait = tonumber(value)
        else
            config.farm.wait = 0.2
            sendNotification("Wait Time Error", "You need the WAIT TIME to be a number. It is now 0.2", 50)
        end
    end
})
farming:CreateSection("Collection")
farming:CreateTextLabel("Auto Collect Orbs is currently broken/patched")
--[[
farming:CreateToggle({
    Name = "Collect Orbs",
    Callback = function(value)
        config.autoOrb = value
        while config.autoOrb and task.wait() do

            for _, orb in ipairs(Orbs:GetChildren()) do
                if orb:IsA("Part") then
                    orb.CFrame = HumanoidRootPart.CFrame
                end
            end

        end
    end
})
]]
farming:CreateToggle({
    Name = "Collect Lootbags",
    Callback = function(value)
        config.autoLootbag = value
        while config.autoLootbag and task.wait() do

            for _, lootbag in ipairs(Lootbags:GetDescendants()) do
                if lootbag:IsA("MeshPart") then
                    lootbag.CFrame = HumanoidRootPart.CFrame
                end
            end

        end
    end
})
farming:CreateSection("Egg Farming")
farming:CreateTextLabel("You must be near eggs to hatch them")
farming:CreateDropdown({
    Name = "Egg to farm",
    Items = eggTable,
    Callback = function(eggPicked)
        config.egg.selectedEgg = eggPicked
    end
})
farming:CreateSlider({
    Name = "Amount of eggs",
    Step = 1,
    Maximum = 10,
    Minimum = 1,
    Callback = function(eggAmount)
        config.egg.amount = eggAmount
        print(tostring(config.egg.amount))
    end
})
farming:CreateToggle({
    Name = "Farm selected egg",
    Callback = function(value)
        config.egg.farm = value
        while config.egg.farm and task.wait() do
            local splitName = string.split(config.egg.selectedEgg, " | ")
            local args = {
                [1] = splitName[2],
                [2] = tonumber(config.egg.amount)
            }
            Network.Eggs_RequestPurchase:InvokeServer(unpack(args))
            task.wait(0.4)
            local center = getCenter(true)
            for i=1,4 do
                clickPosition(center[1],center[2])
                task.wait()
            end
            task.wait(1)
        end 
        getCenter(false)
    end
})



egg:CreateTextLabel("You must be near eggs to hatch them, currently 1-71")
local amount = 0
egg:CreateSlider({
    Name = "Amount of eggs",
    Step = 1,
    Maximum = 10,
    Minimum = 1,
    Callback = function(eggAmount)
        amount = eggAmount
    end
})
for _,eggName in ipairs(eggTable) do
    egg:CreateButton({
        Name = eggName,
        Callback = function() 
            local splitName = string.split(eggName, " | ")
            local args = {
                splitName[2],
                tonumber(amount)
            }
            Network.Eggs_RequestPurchase:InvokeServer(unpack(args))
        end
    })
end

teleports:CreateTextLabel("Has zones 1-25")
for _,zone in ipairs(zoneTable) do
    teleports:CreateButton({
        Name = tostring(zone[1]),
        Callback = function() 
            goToPart(zone[2] + Vector3.new(0,5,0))
        end
    })
end

obbies:CreateButton({
    Name = 'Complete "Spawn Obby"',
    Callback = function()
        goToPart(instanceSpawnObby:FindFirstChild("Enter", true).CFrame)
        task.wait(1)
        
        local spawnObby = instanceContainer.Active:WaitForChild("SpawnObby")
        local startLine = spawnObby.StartLine
        local endPad = spawnObby.Goal.Pad
        
        goToPart(startLine:FindFirstChild("Part").CFrame + Vector3.new(0,5,0))
        task.wait(0.2)
        goToPart( endPad.CFrame + Vector3.new(0,5,0))
    end
})

credits:CreateTextLabel("UI: griffindoescooking")
credits:CreateTextLabel("Script: griffindoescooking, project L")
credits:CreateButton({
    Name = "project L",
    Callback = function()
        setclipboard("https://discord.gg/Mw7rYHDNw4")
    end
})
credits:CreateSection("Support: ")
credits:CreateButton({
    Name = "Discord",
    Callback = function()
        setclipboard("https://discord.gg/DBPHwFyCVT")
    end
})
